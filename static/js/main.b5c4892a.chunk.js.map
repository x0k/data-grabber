{"version":3,"sources":["assets/gapi.js","components/app.js","serviceWorker.js","index.js"],"names":["data","apiKey","clientId","scope","discoveryDocs","API","_this","this","Object","classCallCheck","init","gapi","window","onSignIn","isSignedIn","isAuthorized","user","googleAuth","currentUser","get","currentApiRequest","sendRequest","load","client","then","auth2","getAuthInstance","listen","addEventListener","requestDetails","request","signIn","signOut","disconnect","App","state","link","api","clickHandler","console","log","authHandler","authorize","logoutHandler","changeHandler","name","event","value","setState","defineProperty","target","classes","props","react_default","a","createElement","className","TextField_default","label","fullWidth","margin","variant","onChange","Button_default","color","button","onClick","Component","withStyles","theme","Boolean","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAAMA,EAAO,CACXC,OAAQ,0CACRC,SAAU,2EACVC,MAAO,0DACPC,cAAe,CAAC,+DAGGC,aAQnB,SAAAA,IAAe,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GACb,IAAIK,EAAO,WACTJ,EAAKK,KAAOC,OAAOD,KACnB,IAAIE,EAAW,SAAAC,GACPA,GACFR,EAAKS,cAAe,EACpBT,EAAKU,KAAOV,EAAKW,WAAWC,YAAYC,MACpCb,EAAKc,mBACPd,EAAKe,YAAYf,EAAKc,qBAGxBd,EAAKS,cAAe,EACpBT,EAAKU,KAAO,OAYlBV,EAAKK,KAAKW,KAAK,eATN,WACLhB,EAAKK,KAAKY,OACPb,KAAKV,GACLwB,KAAK,WACJlB,EAAKW,WAAaX,EAAKK,KAAKc,MAAMC,kBAClCpB,EAAKW,WAAWH,WAAWa,OAAOd,GAClCP,EAAKU,KAAOV,EAAKW,WAAWC,YAAYC,WAK9CP,OAAOD,KACTD,IAEAE,OAAOgB,iBAAiB,aAAclB,2DAI9BmB,GACVtB,KAAKa,kBAAoBS,EACrBtB,KAAKQ,cACPR,KAAKI,KAAKY,OAAOO,QAAQD,GACzBtB,KAAKa,kBAAoB,IAEzBb,KAAKU,WAAWc,6CAKdxB,KAAKU,WAAWH,WAAWK,MAE7BZ,KAAKU,WAAWe,UAGhBzB,KAAKU,WAAWc,8CAKlBxB,KAAKU,WAAWgB,sBCxDdC,6MAEJC,MAAQ,CACNC,KAAM,yBAERC,IAAM,IAAIhC,IAEViC,aAAe,WACbC,QAAQC,IAAIlC,EAAK+B,QAGnBI,YAAc,WACZnC,EAAK+B,IAAIK,eAGXC,cAAgB,WACdrC,EAAK+B,IAAIJ,gBAGXW,cAAgB,SAAAC,GAAI,OAAI,SAACC,EAAOC,GAC9BzC,EAAK0C,SAALxC,OAAAyC,EAAA,EAAAzC,CAAA,GAAiBqC,EAAOC,EAAMI,OAAOH,kFAK/B,IAAEI,EAAY5C,KAAK6C,MAAjBD,QACJf,EAAS7B,KAAK4B,MAAdC,KAEJ,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MAAM,OACNC,WAAS,EACTC,OAAO,SACPC,QAAQ,WACRd,MAAOX,EACP0B,SAAUvD,KAAKqC,cAAc,UAE/BS,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,MAAM,UAAUR,UAAWL,EAAQc,OAAQC,QAAS3D,KAAK+B,cAAjE,SAGE/B,KAAK8B,IAAItB,aACRsC,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQE,UAAWL,EAAQc,OAAQC,QAAS3D,KAAKkC,aAAjD,WAGCY,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQE,UAAWL,EAAQc,OAAQC,QAAS3D,KAAKoC,eAAjD,mBA7CMwB,aAuDHC,uBA7DA,SAAAC,GAAK,MAAK,CACvBJ,OAAQ,KA4DKG,CAAmBlC,GCxDdoC,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.b5c4892a.chunk.js","sourcesContent":["const data = {\n  apiKey: 'AIzaSyCkAfKa8_ihDjgXOmPAL2Kt6u-rLIjrt7M',\n  clientId: '410461802739-7v5t433ruper4kiad0h0kocg2j659rg7.apps.googleusercontent.com',\n  scope: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n  discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n};\n\nexport default class API {\n\n  gapi;\n  googleAuth;\n  isAuthorized;\n  currentApiRequest;\n  user;\n\n  constructor () {\n    let init = () => {\n      this.gapi = window.gapi;\n      let onSignIn = isSignedIn => {\n          if (isSignedIn) {\n            this.isAuthorized = true;\n            this.user = this.googleAuth.currentUser.get();\n            if (this.currentApiRequest) {\n              this.sendRequest(this.currentApiRequest);\n            }\n          } else {\n            this.isAuthorized = false;\n            this.user = null;\n          }\n        },\n        load = () => {\n          this.gapi.client\n            .init(data)\n            .then(() => {\n              this.googleAuth = this.gapi.auth2.getAuthInstance();\n              this.googleAuth.isSignedIn.listen(onSignIn);\n              this.user = this.googleAuth.currentUser.get();\n            });\n        };\n      this.gapi.load('client:auth2', load);\n    };\n    if (window.gapi) {\n      init();\n    } else {\n      window.addEventListener('gapiLoaded', init);\n    }\n  }\n\n  sendRequest(requestDetails) {\n    this.currentApiRequest = requestDetails;\n    if (this.isAuthorized) {\n      this.gapi.client.request(requestDetails);\n      this.currentApiRequest = {};\n    } else {\n      this.googleAuth.signIn();\n    }\n  }\n\n  authorize () {\n    if (this.googleAuth.isSignedIn.get()) {\n      // User is authorized and has clicked 'Sign out' button.\n      this.googleAuth.signOut();\n    } else {\n      // User is not signed in. Start Google auth flow.\n      this.googleAuth.signIn();\n    }\n  }\n\n  disconnect () {\n    this.googleAuth.disconnect();\n  }\n\n}","import React, { Component } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport API from '../assets/gapi';\n\nconst styles = theme => ({\n  button: {\n\n  }\n});\n\nclass App extends Component {\n\n  state = {\n    link: 'https://reactjs.org'\n  };\n  api = new API();\n\n  clickHandler = () => {\n    console.log(this.api);\n  }\n\n  authHandler = () => {\n    this.api.authorize();\n  }\n\n  logoutHandler = () => {\n    this.api.disconnect();\n  }\n\n  changeHandler = name => (event, value) => {\n    this.setState({ [name]: event.target.value });\n  }\n\n  render() {\n\n    const { classes } = this.props,\n      { link } = this.state;\n\n    return (\n      <div className=\"App\">\n        <TextField\n          label=\"Link\"\n          fullWidth\n          margin=\"normal\"\n          variant=\"outlined\"\n          value={link}\n          onChange={this.changeHandler('link')}\n        />\n        <Button color=\"primary\" className={classes.button} onClick={this.clickHandler} >\n          Fetch\n        </Button>\n        { this.api.isAuthorized ?\n          (<Button className={classes.button} onClick={this.authHandler} >\n            SIGN IN\n          </Button>)\n          :(<Button className={classes.button} onClick={this.logoutHandler} >\n            LOG OUT\n          </Button>)\n        }\n      </div>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}