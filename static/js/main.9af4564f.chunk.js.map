{"version":3,"sources":["assets/gapi.js","components/app.js","serviceWorker.js","index.js"],"names":["gapi","API","data","_this","this","Object","classCallCheck","isAuthorized","onStatusUpdate","user","onUserUpdate","scriptId","_satusUpdate","status","_userUpdate","setAuth","googleAuth","auth2","getAuthInstance","isSignedIn","listen","currentUser","get","load","client","init","then","window","addEventListener","signOut","signIn","url","function","parameters","devMode","request","root","path","concat","method","body","Promise","resolve","reject","execute","response","error","JSON","stringify","details","errorMessage","result","apiKey","clientId","scope","discoveryDocs","App","props","possibleConstructorReturn","getPrototypeOf","call","state","link","api","authHandler","authorize","runHandler","fetch","console","log","catch","err","changeHandler","name","event","setState","defineProperty","target","value","classes","_this$state","react_default","a","createElement","className","TextField_default","label","fullWidth","margin","variant","onChange","Button_default","color","button","onClick","w3","ig","Component","withStyles","theme","Boolean","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOA8FeA,EAAA,eAjEb,SAAAC,EAAaC,GAAM,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAH,GAAAG,KAlBnBG,cAAe,EAkBIH,KAjBnBI,eAAiB,KAiBEJ,KAhBnBK,KAAO,KAgBYL,KAfnBM,aAAe,KAeIN,KAdnBO,SAAW,oCAcQP,KAZnBQ,aAAe,SAAAC,GACbV,EAAKI,aAAeM,EAChBV,EAAKK,gBACPL,EAAKK,eAAeK,IASLT,KANnBU,YAAc,SAAAL,GACZN,EAAKM,KAAON,EAAKI,aAAeE,EAAO,KACnCN,EAAKO,cACPP,EAAKO,aAAaP,EAAKM,OAIzB,IAAIM,EAAU,WACZZ,EAAKa,WAAab,EAAKH,KAAKiB,MAAMC,kBAClCf,EAAKa,WAAWG,WAAWC,OAAOjB,EAAKS,cACvCT,EAAKa,WAAWK,YAAYD,OAAOjB,EAAKW,aACxCX,EAAKS,aAAaT,EAAKa,WAAWG,WAAWG,OACzCnB,EAAKI,cACPJ,EAAKW,YAAYX,EAAKa,WAAWK,YAAYC,QAG7CC,EAAO,WACTpB,EAAKH,KAAKwB,OACPC,KAAKvB,GACLwB,KAAKX,IAENU,EAAO,WACTtB,EAAKH,KAAO2B,OAAO3B,KACnBG,EAAKH,KAAKuB,KAAK,eAAgBA,IAE7BI,OAAO3B,KACTyB,IAEAE,OAAOC,iBAAiB,aAAcH,2DAKxC,OAAIrB,KAAKG,aACAH,KAAKY,WAAWa,UAEhBzB,KAAKY,WAAWc,uCAIpBC,GACL,IAAI7B,EAAO,CACT8B,SAAY,QACZC,WAAc,CAAEF,GAChBG,SAAW,GAETC,EAAU/B,KAAKJ,KAAKwB,OAAOW,QAAQ,CACrCC,KAAQ,gCACRC,KAAA,cAAAC,OAAsBlC,KAAKO,SAA3B,QACA4B,OAAU,OACVC,KAAQtC,IAEV,OAAO,IAAIuC,QAAQ,SAACC,EAASC,GAC3BR,EAAQS,QAAQ,SAAAC,GACd,GAAIA,EAASC,OAASD,EAASC,MAAMjC,OAEnC8B,EAAO,sBAAwBI,KAAKC,UAAUH,EAAU,KAAM,SACzD,GAAIA,EAASC,MAAO,CAEzB,IAAIA,EAAQD,EAASC,MAAMG,QAAQ,GACnCN,EAAO,0BAA4BG,EAAMI,mBAGzCR,EAAQG,EAASA,SAASM,qBAQrB,CA9FF,CACXC,OAAQ,0CACRC,SAAU,2EACVC,MAAO,yGACPC,cAAe,CAAC,8DCSZC,cAOJ,SAAAA,EAAaC,GAAO,IAAAtD,EAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAoD,IAClBrD,EAAAE,OAAAqD,EAAA,EAAArD,CAAAD,KAAAC,OAAAsD,EAAA,EAAAtD,CAAAmD,GAAAI,KAAAxD,KAAMqD,KANRI,MAAQ,CACNC,KAAM,sBACNrD,KAAMsD,EAAItD,MAGQN,EAKpB6D,YAAc,WACZD,EAAIE,aANc9D,EASpB+D,WAAa,WACXH,EAAII,MAAMhE,EAAK0D,MAAMC,MAClBpC,KAAK,SAAAmB,GAAQ,OAAIuB,QAAQC,IAAIxB,KAC7ByB,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,MAZVpE,EAepBqE,cAAgB,SAAAC,GAAI,OAAI,SAAAC,GACtBvE,EAAKwE,SAALtE,OAAAuE,EAAA,EAAAvE,CAAA,GAAiBoE,EAAOC,EAAMG,OAAOC,UAdrCf,EAAIrD,aAAe,SAAAD,GAAI,OAAIN,EAAKwE,SAAS,CAAElE,UAFzBN,wEAqBZ,IAAE4E,EAAY3E,KAAKqD,MAAjBsB,QAAFC,EACa5E,KAAKyD,MAApBC,EADEkB,EACFlB,KAAMrD,EADJuE,EACIvE,KAEV,OACEwE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MAAM,OACNC,WAAS,EACTC,OAAO,SACPC,QAAQ,WACRX,MAAOhB,EACP4B,SAAUtF,KAAKoE,cAAc,UAE/BS,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,MAAM,UAAUR,UAAWL,EAAQc,OAAQC,QAAS1F,KAAK8D,YAAjE,SAGAe,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQE,UAAWL,EAAQc,OAAQC,QAAS1F,KAAK4D,aAC7CvD,EAAI,WAAA6B,OAAc7B,EAAKsF,GAAGC,IAAO,kBA7C3BC,aAqDHC,uBA3DA,SAAAC,GAAK,MAAK,CACvBN,OAAQ,KA0DKK,CAAmB1C,GCtDd4C,QACW,cAA7BzE,OAAO0E,SAASC,UAEe,UAA7B3E,OAAO0E,SAASC,UAEhB3E,OAAO0E,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrF,KAAK,SAAAsF,GACjCA,EAAaC","file":"static/js/main.9af4564f.chunk.js","sourcesContent":["const data = {\n  apiKey: 'AIzaSyA0rvMrNVWVhm8HNd56eY64OXhVEVIxqlQ',\n  clientId: '169025190639-ktoqejmqod0hcfh8pbt7hknbg8apfps9.apps.googleusercontent.com',\n  scope: 'https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/script.external_request',\n  discoveryDocs: ['https://script.googleapis.com/$discovery/rest?version=v1']\n};\n\nclass API {\n\n  gapi;\n  googleAuth;\n  isAuthorized = false;\n  onStatusUpdate = null;\n  user = null;\n  onUserUpdate = null;\n  scriptId = 'M1qUJ-bECOgm4Y9z9evwE5gNpR_a-QLCI';\n\n  _satusUpdate = status => {\n    this.isAuthorized = status;\n    if (this.onStatusUpdate)\n      this.onStatusUpdate(status);\n  }\n\n  _userUpdate = user => {\n    this.user = this.isAuthorized ? user : null;\n    if (this.onUserUpdate)\n      this.onUserUpdate(this.user);\n  };\n\n  constructor (data) {\n    let setAuth = () => {\n      this.googleAuth = this.gapi.auth2.getAuthInstance();\n      this.googleAuth.isSignedIn.listen(this._satusUpdate);\n      this.googleAuth.currentUser.listen(this._userUpdate);\n      this._satusUpdate(this.googleAuth.isSignedIn.get());\n      if (this.isAuthorized) {\n        this._userUpdate(this.googleAuth.currentUser.get());\n      }\n    };\n    let load = () => {\n      this.gapi.client\n        .init(data)\n        .then(setAuth);\n    };\n    let init = () => {\n      this.gapi = window.gapi;\n      this.gapi.load('client:auth2', load);\n    };\n    if (window.gapi) {\n      init();\n    } else {\n      window.addEventListener('gapiLoaded', init);\n    }\n  }\n\n  authorize () {\n    if (this.isAuthorized) {\n      return this.googleAuth.signOut();\n    } else {\n      return this.googleAuth.signIn();\n    }\n  }\n\n  fetch (url) {\n    let data = {\n      'function': 'fetch',\n      'parameters': [ url ],\n      'devMode': true\n    };\n    let request = this.gapi.client.request({\n      'root': 'https://script.googleapis.com',\n      'path': `v1/scripts/${this.scriptId}:run`,\n      'method': 'POST',\n      'body': data\n    });\n    return new Promise((resolve, reject) => {\n      request.execute(response => {\n        if (response.error && response.error.status) {\n          // The API encountered a problem before the script started executing.\n          reject('Error calling API: ' + JSON.stringify(response, null, 2));\n        } else if (response.error) {\n          // The API executed, but the script returned an error.\n          let error = response.error.details[0];\n          reject('Script error! Message: ' + error.errorMessage);\n        } else {\n          // Here, the function returns an array of strings.\n          resolve(response.response.result);\n        }\n      });\n    });\n  }\n\n}\n\nexport default new API(data);","import React, { Component } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport api from '../assets/gapi';\n\nconst styles = theme => ({\n  button: {\n\n  }\n});\n\nclass App extends Component {\n\n  state = {\n    link: 'https://reactjs.org',\n    user: api.user,\n  };\n\n  constructor (props) {\n    super(props);\n    api.onUserUpdate = user => this.setState({ user });\n  }\n\n  authHandler = () => {\n    api.authorize();\n  }\n\n  runHandler = () => {\n    api.fetch(this.state.link)\n      .then(response => console.log(response))\n      .catch(err => console.log(err));\n  }\n\n  changeHandler = name => event => {\n    this.setState({ [name]: event.target.value });\n  }\n\n  render() {\n\n    const { classes } = this.props,\n      { link, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <TextField\n          label=\"Link\"\n          fullWidth\n          margin=\"normal\"\n          variant=\"outlined\"\n          value={link}\n          onChange={this.changeHandler('link')}\n        />\n        <Button color=\"primary\" className={classes.button} onClick={this.runHandler} >\n          Fetch\n        </Button>\n        <Button className={classes.button} onClick={this.authHandler} >\n          { user ? `LOG OUT ${user.w3.ig}` : 'LOG IN' }\n        </Button>\n      </div>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}